<?xml version="1.0" ?>
<launch>    
  <!-- Load each of the config files into the parameter server -->   
  <rosparam command="load" file="$(find rodney)/config/config.yaml"/>       
  <rosparam command="load" file="$(find pan_tilt)/config/config.yaml"/>
  <rosparam command="load" file="$(find face_recognition)/config/config.yaml"/>
  <rosparam command="load" file="$(find head_control)/config/config.yaml"/>
  <rosparam command="load" file="$(find rodney_missions)/config/config.yaml"/>
  
  <!-- Launch the camera node from one of its launch files -->
  <include file="$(find raspicam_node)/launch/camerav2_1280x960.launch" /> 
  
  <!-- Start all the nodes that make up Rondey -->
  <!-- Starting with those written for the project -->
  <node pkg="pan_tilt" type="pan_tilt_node" name="pan_tilt_node"/>
  <node pkg="face_recognition" type="face_recognition_node.py" name="face_recognition_node"/>
  <node pkg="head_control" type="head_control_node" name="head_control_node"/>  
  <node pkg="speech" type="speech_node" name="speech_node"/>
  <node pkg="rodney_missions" type="rodney_missions_node.py" name="rodney_missions" output="screen"/>
  <node pkg="rodney" type="rodney_node" name="rodney_node" output="screen" />
  <node pkg="thunderborg" type="thunderborg_node.py" name="thunderborg_node">
    <rosparam command="load" file="$(find thunderborg)/config/config.yaml"/>
  </node>
  <!-- The Arduino or Teensy. 
       For Arduino Nano use /dev/ttyUSB0 (or nano if dev rules updated) and 57600.
       For the Teensy use the defaults /dev/ttyACM0 (or teensy if dev rules updated) and 500000 -->
  <arg name="serial_port" default="/dev/teensy"/>
  <arg name="baud_rate" default="500000"/>  
  <node pkg="rosserial_python" type="serial_node.py" name="serial_node" output="screen">
    <param name="port" value="$(arg serial_port)"/>
    <param name="baud" value="$(arg baud_rate)"/>
  </node>
  
  <!-- The RPLidar and laser filter node 
       Have created symbolic link for /dev/ttyUSBn to be rplidar -->
  <node pkg="rplidar_ros" type="rplidarNode" name="rplidar_node">
    <param name="serial_port" type="string" value="/dev/rplidar"/>
    <param name="serial_baudrate" type="int" value="115200"/>
    <param name="frame_id" type="string" value="laser"/>
    <remap from="scan" to="scan_filter_input"/>
  </node>
  <node pkg ="laser_filters" type="scan_to_scan_filter_chain" name="scan_to_scan_filter_chain">
    <rosparam command="load" file="$(find rodney)/config/laser_filter_config.yaml"/>
    <remap from="scan" to="scan_filter_input"/>
    <remap from="scan_filtered" to="scan"/>
  </node>
  
  <!-- The robot face -->
  <node pkg="homer_robot_face" type="RobotFace" name="RobotFace"/>
  
  <!-- Static transform for the laser -> baselink -->
  <node pkg="tf2_ros" type="static_transform_publisher" name="laser_link_broadcaster" args="0.085 0 0.107 0 0 0 /base_link /laser"/>
  <!-- The base_link -> base_footprint -->  
  <node pkg="tf2_ros" type="static_transform_publisher" name="base_footprint_broadcaster" args="0 0 0.09 0 0 0 /base_footprint /base_link"/>
  
  <!-- Node to fuse motor encoder and IMU data for odom -->
  <node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization_node">
    <remap from="odometry/filtered" to="odom"/>
    <rosparam command="load" file="$(find rodney)/config/robot_localization.yaml"/> 
  </node>
  
  <!-- Navigation -->
  <arg name="no_nav" default="false"/>  
  <group unless="$(arg no_nav)"> 
    <arg name="map_file" default="second_floor"/>
    <node pkg="map_server" type="map_server" name="map_server" args="$(find rodney)/maps/$(arg map_file).yaml" output="screen"/>  
    <node pkg="amcl" type="amcl" name="amcl" output="screen">
      <rosparam command="load" file="$(find rodney)/config/amcl_config.yaml"/>
    </node>
    <node pkg="move_base" type="move_base" name="move_base" respawn="false" output="screen">
      <rosparam command="load" file="$(find rodney)/config/base_local_planner_params.yaml"/>
      <rosparam command="load" file="$(find rodney)/config/costmap_common_params.yaml" ns="global_costmap"/>
      <rosparam command="load" file="$(find rodney)/config/costmap_common_params.yaml" ns="local_costmap"/>
      <rosparam command="load" file="$(find rodney)/config/global_costmap_params.yaml"/>
      <rosparam command="load" file="$(find rodney)/config/local_costmap_params.yaml"/>       
      <remap from="cmd_vel" to="demand_vel"/>
    </node>   
  </group>
   
</launch>
